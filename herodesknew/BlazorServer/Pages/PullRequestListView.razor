@page "/pull-request-list"

@using System.Collections.Generic
@using Radzen;
@using Radzen.Blazor;
@using herodesknew.Application.PullRequests.Queries.GetPullRequests;
@using herodesknew.Application.Tickets.Queries.GetFilteredTickets;
@using herodesknew.Application.Tickets.Queries.GetTickets;
@using herodesknew.Domain.Entities;
@using herodesknew.Domain.Repositories;
@using herodesknew.Shared


@inject GetPullRequestsQueryHandler GetPullRequestsQueryHandler;


<h3>Pull Requests</h3>

<RadzenDataGrid TItem="PullRequestResponse" Data="@pullRequests" LoadData="@LoadData" Count="@totalCount" PageSize="10" IsLoading=@isLoading ShowPagingSummary ShowExpandColumn AllowPaging AllowSorting AllowColumnResize AllowFiltering>
    <Columns>
        <RadzenDataGridColumn TItem="PullRequestResponse" Property="Id" Title="Id" />
        <RadzenDataGridColumn TItem="PullRequestResponse" Property="TicketId" Title="Ticket Id" />
    </Columns>
</RadzenDataGrid>

@code {
    private PullRequestResponse[]? pullRequests;
    bool isLoading = false;
    private int totalCount;

    void LoadData(LoadDataArgs args)
    {
        isLoading = true;
        var filtes = args.Filters
            .Select((dataGridFilter) => new Filter()
                {
                    Operator = dataGridFilter.FilterOperator.GetDisplayDescription(),
                    Property = dataGridFilter.Property,
                    Value = dataGridFilter.FilterValue.ToString() ?? string.Empty,
                });
        var result = GetPullRequestsQueryHandler.Handle(new GetPullRequestQuery());
        if (result.IsSuccess)
        {

            pullRequests = result.Value?.ToArray() ?? Array.Empty<PullRequestResponse>();
           
        }
        else
        {
            pullRequests = Array.Empty<PullRequestResponse>();
        }

        isLoading = false;
    }
    
}