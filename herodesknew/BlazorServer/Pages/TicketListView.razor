@page "/"

@using System.Collections.Generic
@using Radzen;
@using Radzen.Blazor;
@using herodesknew.Application.Local;
@using herodesknew.Application.Tickets.Queries.GetFilteredTickets;
@using herodesknew.Domain.Entities;
@using herodesknew.Domain.Repositories;
@using herodesknew.Shared


@inject GetFilteredTicketsQueryHandler GetGetFilteredTicketsQueryHandler;


<h3>Tickets List</h3>

<RadzenDataGrid TItem="TicketResponse" Data="@tickets" LoadData="@LoadData" Count="@totalCount" PageSize="10" IsLoading=@isLoading ShowPagingSummary ShowExpandColumn AllowPaging AllowSorting AllowColumnResize AllowFiltering>
    <Template Context="ticket">
        <div>
            <RadzenText class="rz-text-wrap" TextStyle="TextStyle.Body1" TextAlign="TextAlign.Left">
                <strong>User</strong><br />
                @ticket.UserEmail
            </RadzenText>
            <RadzenText class="rz-text-wrap" TextStyle="TextStyle.Body1" TextAlign="TextAlign.Left">
                <strong>Title</strong><br />
                @ticket.Title
            </RadzenText>
            <RadzenText class="rz-text-wrap" TextStyle="TextStyle.Body1" TextAlign="TextAlign.Left">
                <strong>Description</strong><br />
                @ticket.Description
            </RadzenText>
            @if (ticket?.Attachments != null && ticket.Attachments.Count() > 0)
            {
                <RadzenText class="rz-text-wrap" TextStyle="TextStyle.Body1" TextAlign="TextAlign.Left">
                    <strong>Attachments</strong><br />
                    <ul>
                        @foreach (var attachment in ticket.Attachments)
                        {
                            <li> <RadzenLink Path=@($"/Attachment/{attachment.Id}") Text=@attachment.Id.ToString() target="_blank"></RadzenLink> </li>
                        }
                    </ul>

                </RadzenText>
            }
            @if (ticket?.PullRequests != null && ticket.PullRequests.Count() > 0)
            {
                <RadzenText class="rz-text-wrap" TextStyle="TextStyle.Body1" TextAlign="TextAlign.Left">
                    <strong>Pull Requests</strong><br />
                    <ul>
                        @foreach (var pullRequest in ticket.PullRequests)
                        {
                            <li> <RadzenLink Path=@($"https://dev.azure.com/simp-cloud/SQL/_git/SQL/pullrequest/{pullRequest.Id}") Text=@pullRequest.Id.ToString() target="_blank"></RadzenLink> </li>
                        }
                    </ul>

                </RadzenText>
            }
            @if (ticket?.SqlFiles != null && ticket.SqlFiles.Count() > 0)
            {
                <RadzenText class="rz-text-wrap" TextStyle="TextStyle.Body1" TextAlign="TextAlign.Left">
                    <strong>SQL Files</strong><br />
                    <ul>
                        @foreach (var sqlFile in ticket.SqlFiles)
                        {
                            <li> 
                                <RadzenLabel Text=@(Path.GetFileName(sqlFile.sqlFileName))></RadzenLabel>
                                <RadzenButton Variant="Variant.Text" Size="ButtonSize.ExtraSmall" Click=@(args => FileOpener.Open(sqlFile.sqlFileName)) ButtonStyle="ButtonStyle.Secondary" Text="Open" />
                                @if(sqlFile.pullRequestId == null)
                                {
                                    <RadzenButton Variant = "Variant.Text" Size = "ButtonSize.ExtraSmall" Click =@(args => FileOpener.Open(sqlFile.sqlFileName)) ButtonStyle = "ButtonStyle.Secondary" Text = "Send" />
                                }                           
                            </li>
                        }
                    </ul>
                </RadzenText>
            }
        </div>
    </Template>
    <Columns>

        <RadzenDataGridColumn TItem="TicketResponse" Property="Id" Title="Id" />
        <RadzenDataGridColumn TItem="TicketResponse" Property="Status" Title="Status">
            <Template Context="data">
                <RadzenBadge Shade="Shade.Lighter"
                             BadgeStyle="(data.Status switch {
                        StatusEnum.OK => BadgeStyle.Success,
                        StatusEnum.DP => BadgeStyle.Info,
                        StatusEnum.CA => BadgeStyle.Success,
                                    _ => BadgeStyle.Warning})"
                             Text="@(data.Status.ToString())" />
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="TicketResponse" Property="SlaUsed" Title="SLA" Filterable="false" />
        <RadzenDataGridColumn TItem="TicketResponse" Property="StartDate" Title="StartDate" FormatString="{0:d}" Filterable="false" />
        <RadzenDataGridColumn TItem="TicketResponse" Property="Id" Title="Actions" Filterable="false">
            <Template Context="data">
                <RadzenButton Variant="Variant.Text" Size="ButtonSize.ExtraSmall" @onclick="(() => {})" ButtonStyle="ButtonStyle.Secondary" Text="Edit" />
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    private TicketResponse[]? tickets;
    bool isLoading = false;
    private int totalCount;

    async Task LoadData(LoadDataArgs args)
    {
        isLoading = true;
        var filtes = args.Filters
            .Select((dataGridFilter) => new Filter()
                {
                    Operator = dataGridFilter.FilterOperator.GetDisplayDescription(),
                    Property = dataGridFilter.Property,
                    Value = dataGridFilter.FilterValue.ToString() ?? string.Empty,
                });
        var result = await GetGetFilteredTicketsQueryHandler.Handle(new GetFilteredTicketsQuery()
            {
                Filters = filtes.ToList(),
                Take = args.Top ?? 10,
                IdSupportAgent = 11981,
                Skip = args.Skip ?? 0

            });
        if (result.IsSuccess)
        {

            tickets = result.Value.ticketResponses.ToArray();
            totalCount = result.Value.totalCount;
        }
        else
        {
            tickets = Array.Empty<TicketResponse>();
            totalCount = tickets.Count();
        }

        isLoading = false;
    }
    public class GetFiltredTicketsResponse
    {
        public List<TicketResponse> Tickets { get; set; }
        public int TotalCount { get; set; }
    }

    void Doing()
    {
        var pastaBase = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments), "MS\\src");
        var pastaTicket = EncontrarPastaPorID(Path.Combine(pastaBase, "HD"), 752287);

    }

    static string? EncontrarPastaPorID(string pastaBase, int idProcurado)
    {
        Queue<string> fila = new Queue<string>();
        fila.Enqueue(pastaBase);

        while (fila.Count > 0)
        {
            string pastaAtual = fila.Dequeue();
            string[] subpastas = Directory.GetDirectories(pastaAtual);

            foreach (string subpasta in subpastas)
            {
                string nomeSubpasta = Path.GetFileName(subpasta);
                int id;

                if (int.TryParse(nomeSubpasta, out id))
                {
                    if (id == idProcurado)
                    {
                        return subpasta; // Pasta encontrada!
                    }
                }

                fila.Enqueue(subpasta);
            }
        }

        return null; // Pasta não encontrada
    }
}