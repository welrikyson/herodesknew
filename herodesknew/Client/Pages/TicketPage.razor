@page "/ticket-list-view"

@using System.Collections.Generic
@using herodesknew.Application.Tickets.Queries.GetTickets;
@using herodesknew.Domain.Entities;
@using herodesknew.Domain.Repositories;
@using herodesknew.Shared

@inject HttpClient Http

<h3>Tickets List</h3>


<RadzenDataGrid TItem="TicketResponse" Data="@tickets" LoadData="@LoadData" Count="@totalCount" PageSize="10" IsLoading=@isLoading ShowPagingSummary ShowExpandColumn AllowPaging AllowSorting AllowColumnResize AllowFiltering>
    <Template Context="ticket">        
        <div>
            <RadzenText class="rz-text-wrap" TextStyle="TextStyle.Body1" TextAlign="TextAlign.Left">
                <strong>User</strong><br />
                @ticket.UserEmail
            </RadzenText>
            <RadzenText class="rz-text-wrap" TextStyle="TextStyle.Body1" TextAlign="TextAlign.Left">
                <strong>Title</strong><br />
                @ticket.Title
            </RadzenText>
            <RadzenText class="rz-text-wrap" TextStyle="TextStyle.Body1" TextAlign="TextAlign.Left">
                <strong>Description</strong><br /> 
                @ticket.Description
            </RadzenText>
            @if (ticket?.Attachments != null && ticket.Attachments.Count() > 0)
            {
                <RadzenText class="rz-text-wrap" TextStyle="TextStyle.Body1" TextAlign="TextAlign.Left">
                    <strong>Attachments</strong><br />
                    <ul>
                        @foreach (var attachment in ticket.Attachments)
                        {
                            <li> <RadzenLink Path=@($"/Attachment/{attachment.Id}") Text=@attachment.Id.ToString() target="_blank"></RadzenLink> </li>
                        }
                    </ul>
                    
                </RadzenText>
            }
        </div>
    </Template>
    <Columns>
        <RadzenDataGridColumn TItem="TicketResponse" Property="Id" Title="Id">
            <Template Context="data">
                <RadzenBadge Shade="Shade.Lighter" 
                    BadgeStyle="(data.Status switch
                        {                   
                            StatusEnum.OK => BadgeStyle.Success,
                            StatusEnum.DP => BadgeStyle.Info,
                            StatusEnum.CA => BadgeStyle.Success,
                            _ => BadgeStyle.Warning
                        })" 
                    
                    Text="@(data.Id.ToString())" />
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="TicketResponse" Property="Status" Title="Status" />
        <RadzenDataGridColumn TItem="TicketResponse" Property="SlaUsed" Title="SLA" Filterable="false" />
        <RadzenDataGridColumn TItem="TicketResponse" Property="StartDate" Title="StartDate" FormatString="{0:d}" Filterable="false" />
        <RadzenDataGridColumn TItem="TicketResponse" Property="StartDate" Title="EndDate" FormatString="{0:d}" Filterable="false" />


        
        @*<RadzenDataGridColumn TItem="TicketResponse" Property="Id" Title="Action" Filterable="false">
            <Template Context="data">
                <RadzenButton ButtonStyle="ButtonStyle.Secondary" Shade="Shade.Lighter" Size="ButtonSize.ExtraSmall" @onclick="(() => {})" Icon="info" class="m-1" />
            </Template>
        </RadzenDataGridColumn>*@
    </Columns>
</RadzenDataGrid>

@code {
    private TicketResponse[]? tickets;
    bool isLoading = false;
    private int totalCount;

    async Task LoadData(LoadDataArgs args)
    {
        isLoading = true;
        var filtes = args.Filters
            .Select((dataGridFilter) => new Filter()
                {
                    Operator = dataGridFilter.FilterOperator.GetDisplayDescription(),
                    Property = dataGridFilter.Property,
                    Value = dataGridFilter.FilterValue.ToString() ?? string.Empty,
                });

        var response = await Http.PostAsJsonAsync($"Ticket/GetFilteredTickets?skip={args.Skip ?? 0}&take={args.Top ?? 10}", filtes);
        if (response.IsSuccessStatusCode)
        {
            var contentString = await response.Content.ReadAsStringAsync();
            var result = await response.Content.ReadFromJsonAsync<GetFiltredTicketsResponse>();
            tickets = result?.Tickets.ToArray();
            totalCount = result?.TotalCount ?? 0;
        }
        else
        {
            tickets = Array.Empty<TicketResponse>();
            totalCount = tickets.Count();
        }

        isLoading = false;
    }
    public class GetFiltredTicketsResponse
    {
        public List<TicketResponse> Tickets { get; set; }
        public int TotalCount { get; set; }
    }
}