@page "/"
@using herodesknew.Application.Tickets.Queries.GetTickets;
@using herodesknew.Domain.Entities;
@using herodesknew.Shared

@inject HttpClient Http

<h3>Início</h3>

@if (tickets == null)
{
    <p>Carregando informações dos tickets...</p>
}
else
{
    <RadzenCard Style="width: 300px;" Class="mb-3">
        <RadzenText>
            Total de Tickets
        </RadzenText>
        <RadzenStack>
            <p>Total de Tickets em Analise: @totalTicketsEmAnalise</p>
            <p>Total de Tickets Fechados: @totalTicketsFechados</p>
        </RadzenStack>
    </RadzenCard>

    <RadzenCard Style="width: 300px;">
        <RadzenText>
            Tempo Médio de Resolução
        </RadzenText>
        <RadzenText>
            <p>@tempoMedioResolucao horas</p>
        </RadzenText>
    </RadzenCard>
}

@code {
    private int totalTicketsEmAnalise;
    private int totalTicketsFechados;
    private double tempoMedioResolucao;


    private TicketResponse[]? tickets;

    protected override async Task OnInitializedAsync()
    {
        tickets = await Http.GetFromJsonAsync<TicketResponse[]>("Ticket");
        if (tickets == null) return;
        totalTicketsEmAnalise = tickets.Count(t => !t.IsClosed);
        totalTicketsFechados = tickets.Count(t => t.IsClosed);
        tempoMedioResolucao = tickets.Where(t => t.IsClosed).Select(t => t.SlaUsed).DefaultIfEmpty().Average();
    }    
}
