@page "/"
@using herodesknew.Application.Tickets.Queries.GetTickets;
@using herodesknew.Domain.Entities;
@using herodesknew.Shared

@inject HttpClient Http

<h3>Início</h3>

@if (tickets == null)
{
    <p>Carregando informações dos tickets...</p>
}
else
{
    <RadzenCard Style="width: 300px;" Class="mb-3">
        <RadzenText>
            Total de Tickets @firstDayOfMonth.ToString("yyyy/MM")
        </RadzenText>
        <RadzenStack>
            <p>Total de Tickets em Analise: @totalTicketsEmAnalise</p>
            <p>Total de Tickets Fechados: @totalTicketsFechados</p>
        </RadzenStack>
    </RadzenCard>

    <RadzenCard Style="width: 300px;">
        <RadzenText>
            SLA Médio de Resolução
        </RadzenText>
        <RadzenText>
            <p>@slaMedioResolucao %</p>
        </RadzenText>
    </RadzenCard>
}

@code {
    private int totalTicketsEmAnalise;
    private int totalTicketsFechados;
    private double slaMedioResolucao;
    private DateTime firstDayOfMonth;

    private TicketResponse[]? tickets;

    protected override async Task OnInitializedAsync()
    {
        tickets = await Http.GetFromJsonAsync<TicketResponse[]>("Ticket");
        if (tickets == null) return;

        firstDayOfMonth = new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1);

        // Filtrar apenas os tickets com a data de abertura maior que o primeiro dia do mês
        List<TicketResponse> ticketsOpenedAfterFirstDay = tickets.Where(ticket => ticket.StartDate > firstDayOfMonth).ToList();
        
        totalTicketsEmAnalise = ticketsOpenedAfterFirstDay.Count(t => t.Status == StatusEnum.EA);
        totalTicketsFechados = ticketsOpenedAfterFirstDay.Count(t => t.Status == StatusEnum.OK);
        //slaMedioResolucao = Math.Round(ticketsOpenedAfterFirstDay
        //    .Where(t => t.Status == StatusEnum.OK)
        //    .Select(t => t.SlaUsed).DefaultIfEmpty().Average(),2);
        
    }    
}
